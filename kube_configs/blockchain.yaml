#---
#apiVersion: v1
#kind: PersistentVolumeClaim
#metadata:
#  name: shared
#  annotations:
#    #ibmc-file-bronze: 2 IOPS per GB.
#    #ibmc-file-silver: 4 IOPS per GB.
#    #ibmc-file-gold: 10 IOPS per GB.
#    volume.beta.kubernetes.io/storage-class: "ibmc-file-silver"
#spec:
#  accessModes:
#    - ReadWriteMany
#  resources:
#    requests:
#      storage: 1Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: orderer
  namespace: ordererorg1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: orderer
  template:
    metadata:
      labels:
        app: orderer
    spec:
      volumes: 
      - name: shared
        hostPath:
          path: /tmp
#      volumes: 
#      - name: shared
#        persistentVolumeClaim:
#          claimName: shared
      containers:
      - name: orderer
        image: hyperledger/fabric-orderer:x86_64-1.0.5
        command: ["sh", "-c", "sleep 1 && while [ ! -f /shared/bootstrapped ]; do echo Waiting for bootstrap; sleep 1; done; orderer || true && while [ 1 ]; do sleep 100; done;"]
        env:
        - name: ORDERER_CFG_PATH
          value: /shared/utils/
        - name: ORDERER_GENERAL_LISTENADDRESS
          value: 0.0.0.0
        - name: ORDERER_GENERAL_LISTENPORT
          value: "7050"
        - name: ORDERER_GENERAL_LOGLEVEL
          value: debug
        - name: ORDERER_GENERAL_LOCALMSPDIR
          value: /shared/crypto-config/ordererOrganizations/ordererorg1/orderers/orderer.ordererorg1/msp
        - name: ORDERER_GENERAL_LOCALMSPID
          value: OrdererMSP
        - name: ORDERER_GENERAL_GENESISMETHOD
          value: file
        - name: ORDERER_GENERAL_GENESISFILE
          value: /shared/utils/orderer.block
        - name: ORDERER_GENERAL_TLS_ENABLED
          value: "true"
        - name: ORDERER_GENERAL_TLS_PRIVATEKEY
          value: /shared/crypto-config/ordererOrganizations/ordererorg1/orderers/orderer.ordererorg1/tls/server.key
        - name: ORDERER_GENERAL_TLS_CERTIFICATE
          value: /shared/crypto-config/ordererOrganizations/ordererorg1/orderers/orderer.ordererorg1/tls/server.crt
        - name: ORDERER_GENERAL_TLS_ROOTCAS
          value: "[/shared/crypto-config/ordererOrganizations/ordererorg1/orderers/orderer.ordererorg1/tls/ca.crt]"
        volumeMounts:
        - mountPath: /shared
          name: shared
        ports:
        - containerPort: 7050
    
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: capeerorg1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: capeerorg1
  template:
    metadata:
      labels:
        app: capeerorg1
    spec:
      volumes: 
      - name: shared
        hostPath:
          path: /tmp
#      volumes: 
#      - name: shared
#        persistentVolumeClaim:
#          claimName: shared
          
      containers:
      - name: capeerorg1
        image: hyperledger/fabric-ca:x86_64-1.0.5
        command: ["sh", "-c", "sleep 1 && while [ ! -f /shared/bootstrapped ]; do echo Waiting for bootstrap; sleep 1; done; fabric-ca-server start -b admin:adminpw -d"]
        env:
        - name: FABRIC_CA_SERVER_CA_CERTFILE
          value: /shared/crypto-config/peerOrganizations/peerorg1/ca/ca.peerorg1-cert.pem
        - name: FABRIC_CA_SERVER_CA_KEYFILE
          value: /shared/crypto-config/peerOrganizations/peerorg1/ca/key.pem
        - name: FABRIC_CA_SERVER_CA_NAME
          value: ca-peerorg1
        - name: FABRIC_CA_SERVER_DEBUG
          value: "true"
        - name: FABRIC_CA_SERVER_TLS_ENABLED
          value: "true"
        - name: FABRIC_CA_SERVER_TLS_CERTFILE
          value: /shared/crypto-config/peerOrganizations/peerorg1/ca/ca.peerorg1-cert.pem
        - name: FABRIC_CA_SERVER_TLS_KEYFILE
          value: /shared/crypto-config/peerOrganizations/peerorg1/ca/key.pem
        volumeMounts:
        - mountPath: /shared
          name: shared

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: capeerorg2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: capeerorg2
  template:
    metadata:
      labels:
        app: capeerorg2
    spec:
      volumes: 
      - name: shared
        hostPath:
          path: /tmp
#      volumes:
#      - name: shared
#        persistentVolumeClaim:
#          claimName: shared
          
      containers: 
      - name: capeerorg2
        image: hyperledger/fabric-ca:x86_64-1.0.5
        command: ["sh", "-c", "sleep 1 && while [ ! -f /shared/bootstrapped ]; do echo Waiting for bootstrap; sleep 1; done; fabric-ca-server start -b admin:adminpw -d"]
        env:
        - name: FABRIC_CA_SERVER_CA_CERTFILE
          value: /shared/crypto-config/peerOrganizations/peerorg2/ca/ca.peerorg2-cert.pem
        - name: FABRIC_CA_SERVER_CA_KEYFILE
          value: /shared/crypto-config/peerOrganizations/peerorg2/ca/key.pem
        - name: FABRIC_CA_SERVER_CA_NAME
          value: ca-peerorg2
        - name: FABRIC_CA_SERVER_DEBUG
          value: "true"
        - name: FABRIC_CA_SERVER_TLS_ENABLED
          value: "true"
        - name: FABRIC_CA_SERVER_TLS_CERTFILE
          value: /shared/crypto-config/peerOrganizations/peerorg2/ca/ca.peerorg2-cert.pem
        - name: FABRIC_CA_SERVER_TLS_KEYFILE
          value: /shared/crypto-config/peerOrganizations/peerorg2/ca/key.pem
        volumeMounts:
        - mountPath: /shared
          name: shared
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: caorderer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: caorderer
  template:
    metadata:
      labels:
        app: caorderer
    spec:
      volumes:
      - name: shared
        hostPath:
          path: /tmp
#      volumes:
#      - name: shared
#        persistentVolumeClaim:
#          claimName: shared

      containers:
      - name: caorderer
        image: hyperledger/fabric-ca:x86_64-1.0.5
        command: ["sh", "-c", "sleep 1 && while [ ! -f /shared/bootstrapped ]; do echo Waiting for bootstrap; sleep 1; done; fabric-ca-server start -b admin:adminpw -d"]
        env:
        - name: FABRIC_CA_SERVER_CA_CERTFILE
          value: /shared/crypto-config/ordererOrganizations/ordererorg1/ca/ca.ordererorg1-cert.pem
        - name: FABRIC_CA_SERVER_CA_KEYFILE
          value: /shared/crypto-config/ordererOrganizations/ordererorg1/ca/key.pem
        - name: FABRIC_CA_SERVER_CA_NAME
          value: ca-orderer
        - name: FABRIC_CA_SERVER_DEBUG
          value: "true"
        - name: FABRIC_CA_SERVER_TLS_ENABLED
          value: "true"
        - name: FABRIC_CA_SERVER_TLS_CERTFILE
          value: /shared/crypto-config/ordererOrganizations/ordererorg1/ca/ca.ordererorg1-cert.pem
        - name: FABRIC_CA_SERVER_TLS_KEYFILE
          value: /shared/crypto-config/ordererOrganizations/ordererorg1/ca/key.pem
        volumeMounts:
        - mountPath: /shared
          name: shared
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: peerorg1
  name: org1peer1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: org1peer1
  template:
    metadata:
      labels:
        app: org1peer1
    spec:
      volumes:
      - name: shared
        hostPath:
          path: /tmp
      - name: msp
        hostPath:
          path: /tmp/crypto-config/peerOrganizations/peerorg1/peers/peer1.peerorg1/msp
      - name: tls
        hostPath:
          path: /tmp/crypto-config/peerOrganizations/peerorg1/peers/peer1.peerorg1/tls
      - name: dockersocket
        hostPath:
          path: /var/run/docker.sock
#      volumes:
#      - name: shared
#        persistentVolumeClaim:
#          claimName: shared

      containers:
      - name: org1peer1
        image: hyperledger/fabric-peer:x86_64-1.0.5
        command: ["sh", "-c", "sleep 1 && while [ ! -f /shared/bootstrapped ]; do echo Waiting for bootstrap; sleep 1; done; peer node start --peer-defaultchain=false"]
        env:
        - name: CORE_PEER_ID
          value: peer1.peerorg1
        - name: CORE_PEER_ADDRESS
          value: peer1.peerorg1:7051
        - name: CORE_PEER_GOSSIP_EXTERNALENDPOINT
          value: peer1.peerorg1:7051
        - name: CORE_PEER_GOSSIP_BOOTSTRAP
          value: peer1.peerorg1:7051
        - name: CORE_PEER_GOSSIP_USELEADERELECTION
          value: "true"
        - name: CORE_PEER_GOSSIP_ORGLEADER
          value: "false"
        - name: CORE_PEER_PROFILE_ENABLED
          value: "true"
        - name: CORE_VM_ENDPOINT
          value: unix:///host/var/run/docker.sock
        - name: CORE_PEER_LOCALMSPID
          value: Org1MSP
        - name: CORE_LOGGING_LEVEL
          value: debug
        - name: CORE_PEER_TLS_ENABLED
          value: "true"
        - name: CORE_PEER_TLS_CERT_FILE
          value: "/shared/crypto-config/peerOrganizations/peerorg1/peers/peer1.peerorg1/tls/server.crt"
        - name: CORE_PEER_TLS_KEY_FILE
          value: "/shared/crypto-config/peerOrganizations/peerorg1/peers/peer1.peerorg1/tls/server.key"
        - name: CORE_PEER_TLS_ROOTCERT_FILE
          value: "/shared/crypto-config/peerOrganizations/peerorg1/peers/peer1.peerorg1/tls/ca.crt"
        volumeMounts:
        - mountPath: /shared
          name: shared
        - mountPath: /etc/hyperledger/fabric/msp
          name: msp
        - mountPath: /etc/hyperledger/fabric/tls
          name: tls
        - mountPath: /host/var/run/docker.sock
          name: dockersocket
        ports:
        - containerPort: 7051
        - containerPort: 7053
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: peerorg1
  name: org1peer2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: org1peer2
  template:
    metadata:
      labels:
        app: org1peer2
    spec:
      volumes:
      - name: shared
        hostPath:
          path: /tmp
      - name: msp
        hostPath:
          path: /tmp/crypto-config/peerOrganizations/peerorg1/peers/peer2.peerorg1/msp
      - name: tls
        hostPath:
          path: /tmp/crypto-config/peerOrganizations/peerorg1/peers/peer2.peerorg1/tls
      - name: dockersocket
        hostPath:
          path: /var/run/docker.sock
#      volumes:
#      - name: shared
#        persistentVolumeClaim:
#          claimName: shared

      containers:
      - name: org1peer2
        image: hyperledger/fabric-peer:x86_64-1.0.5
        command: ["sh", "-c", "sleep 1 && while [ ! -f /shared/bootstrapped ]; do echo Waiting for bootstrap; sleep 1; done; peer node start --peer-defaultchain=false"]
        env:
        - name: CORE_PEER_ID
          value: peer2.peerorg1
        - name: CORE_PEER_ADDRESS
          value: peer2.peerorg1:7051
        - name: CORE_PEER_GOSSIP_EXTERNALENDPOINT
          value: peer2.peerorg1:7051
        - name: CORE_PEER_GOSSIP_BOOTSTRAP
          value: peer2.peerorg1:7051
        - name: CORE_PEER_GOSSIP_USELEADERELECTION
          value: "true"
        - name: CORE_PEER_GOSSIP_ORGLEADER
          value: "false"
        - name: CORE_PEER_PROFILE_ENABLED
          value: "true"
        - name: CORE_VM_ENDPOINT
          value: unix:///host/var/run/docker.sock
        - name: CORE_PEER_LOCALMSPID
          value: Org1MSP
        - name: CORE_LOGGING_LEVEL
          value: debug
        - name: CORE_PEER_TLS_ENABLED
          value: "true"
        - name: CORE_PEER_TLS_CERT_FILE
          value: "/shared/crypto-config/peerOrganizations/peerorg1/peers/peer2.peerorg1/tls/server.crt"
        - name: CORE_PEER_TLS_KEY_FILE
          value: "/shared/crypto-config/peerOrganizations/peerorg1/peers/peer2.peerorg1/tls/server.key"
        - name: CORE_PEER_TLS_ROOTCERT_FILE
          value: "/shared/crypto-config/peerOrganizations/peerorg1/peers/peer2.peerorg1/tls/ca.crt"
        volumeMounts:
        - mountPath: /shared
          name: shared
        - mountPath: /etc/hyperledger/fabric/msp
          name: msp
        - mountPath: /etc/hyperledger/fabric/tls
          name: tls
        - mountPath: /host/var/run/docker.sock
          name: dockersocket
        ports:
        - containerPort: 7051
        - containerPort: 7053
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: peerorg2
  name: org2peer1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: org2peer1
  template:
    metadata:
      labels:
        app: org2peer1
    spec:
      volumes:
      - name: shared
        hostPath:
          path: /tmp
      - name: msp
        hostPath:
          path: /tmp/crypto-config/peerOrganizations/peerorg2/peers/peer1.peerorg2/msp
      - name: tls
        hostPath:
          path: /tmp/crypto-config/peerOrganizations/peerorg2/peers/peer1.peerorg2/tls
      - name: dockersocket
        hostPath:
          path: /var/run/docker.sock
#      volumes:
#      - name: shared
#        persistentVolumeClaim:
#          claimName: shared

      containers:
      - name: org2peer1
        image: hyperledger/fabric-peer:x86_64-1.0.5
        command: ["sh", "-c", "sleep 1 && while [ ! -f /shared/bootstrapped ]; do echo Waiting for bootstrap; sleep 1; done; peer node start --peer-defaultchain=false"]
        env:
        - name: CORE_PEER_ID
          value: peer1.peerorg2
        - name: CORE_PEER_ADDRESS
          value: peer1.peerorg2:7051
        - name: CORE_PEER_GOSSIP_EXTERNALENDPOINT
          value: peer1.peerorg2:7051
        - name: CORE_PEER_GOSSIP_BOOTSTRAP
          value: peer1.peerorg2:7051
        - name: CORE_PEER_GOSSIP_USELEADERELECTION
          value: "true"
        - name: CORE_PEER_GOSSIP_ORGLEADER
          value: "false"
        - name: CORE_PEER_PROFILE_ENABLED
          value: "true"
        - name: CORE_VM_ENDPOINT
          value: unix:///host/var/run/docker.sock
        - name: CORE_PEER_LOCALMSPID
          value: Org1MSP
        - name: CORE_LOGGING_LEVEL
          value: debug
        - name: CORE_PEER_TLS_ENABLED
          value: "true"
        - name: CORE_PEER_TLS_CERT_FILE
          value: "/shared/crypto-config/peerOrganizations/peerorg2/peers/peer1.peerorg2/tls/server.crt"
        - name: CORE_PEER_TLS_KEY_FILE
          value: "/shared/crypto-config/peerOrganizations/peerorg2/peers/peer1.peerorg2/tls/server.key"
        - name: CORE_PEER_TLS_ROOTCERT_FILE
          value: "/shared/crypto-config/peerOrganizations/peerorg2/peers/peer1.peerorg2/tls/ca.crt"
        volumeMounts:
        - mountPath: /shared
          name: shared
        - mountPath: /etc/hyperledger/fabric/msp
          name: msp
        - mountPath: /etc/hyperledger/fabric/tls
          name: tls
        - mountPath: /host/var/run/docker.sock
          name: dockersocket
        ports:
        - containerPort: 7051
        - containerPort: 7053
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: peerorg2
  name: org2peer2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: org2peer2
  template:
    metadata:
      labels:
        app: org2peer2
    spec:
      volumes:
      - name: shared
        hostPath:
          path: /tmp
      - name: msp
        hostPath:
          path: /tmp/crypto-config/peerOrganizations/peerorg2/peers/peer2.peerorg2/msp
      - name: tls
        hostPath:
          path: /tmp/crypto-config/peerOrganizations/peerorg2/peers/peer2.peerorg2/tls
      - name: dockersocket
        hostPath:
          path: /var/run/docker.sock
#      volumes:
#      - name: shared
#        persistentVolumeClaim:
#          claimName: shared

      containers:
      - name: org2peer2
        image: hyperledger/fabric-peer:x86_64-1.0.5
        command: ["sh", "-c", "sleep 1 && while [ ! -f /shared/bootstrapped ]; do echo Waiting for bootstrap; sleep 1; done; peer node start --peer-defaultchain=false"]
        env:
        - name: CORE_PEER_ID
          value: peer2.peerorg2
        - name: CORE_PEER_ADDRESS
          value: peer2.peerorg2:7051
        - name: CORE_PEER_GOSSIP_EXTERNALENDPOINT
          value:  peer2.peerorg2:7051
        - name: CORE_PEER_GOSSIP_BOOTSTRAP
          value:  peer2.peerorg2:7051
        - name: CORE_PEER_GOSSIP_USELEADERELECTION
          value: "true"
        - name: CORE_PEER_GOSSIP_ORGLEADER
          value: "false"
        - name: CORE_PEER_PROFILE_ENABLED
          value: "true"
        - name: CORE_VM_ENDPOINT
          value: unix:///host/var/run/docker.sock
        - name: CORE_PEER_LOCALMSPID
          value: Org1MSP
        - name: CORE_LOGGING_LEVEL
          value: debug
        - name: CORE_PEER_TLS_ENABLED
          value: "true"
        - name: CORE_PEER_TLS_CERT_FILE
          value: "/shared/crypto-config/peerOrganizations/peerorg2/peers/peer2.peerorg2/tls/server.crt"
        - name: CORE_PEER_TLS_KEY_FILE
          value: "/shared/crypto-config/peerOrganizations/peerorg2/peers/peer2.peerorg2/tls/server.key"
        - name: CORE_PEER_TLS_ROOTCERT_FILE
          value: "/shared/crypto-config/peerOrganizations/peerorg2/peers/peer2.peerorg2/tls/ca.crt"
        volumeMounts:
        - mountPath: /shared
          name: shared
        - mountPath: /etc/hyperledger/fabric/msp
          name: msp
        - mountPath: /etc/hyperledger/fabric/tls
          name: tls
        - mountPath: /host/var/run/docker.sock
          name: dockersocket
        ports:
        - containerPort: 7051
        - containerPort: 7053
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: test
    spec:
      volumes:
      - name: shared
        hostPath:
          path: /tmp
#      volumes:
#      - name: shared
#        persistentVolumeClaim:
#          claimName: shared

      containers:
      - name: test
        image: nginx

---
apiVersion: v1
kind: Service
metadata:
  name: caorderer
  labels:
    app: caorderer
spec:
  type: NodePort
  selector:
    app: caorderer
  ports:
  - protocol: TCP
    port: 7054
    nodePort: 31000
    name: grpc
---
apiVersion: v1
kind: Service
metadata:
  name: capeerorg1
  labels:
    app: capeerorg1
spec:
  type: NodePort
  selector:
    app: capeerorg1
  ports:
  - protocol: TCP
    port: 7054
    nodePort: 31001
    name: grpc
---
apiVersion: v1
kind: Service
metadata:
  name: capeerorg2
  labels:
    app: capeerorg2
spec:
  type: NodePort
  selector:
    app: capeerorg2
  ports:
  - protocol: TCP
    port: 7054
    nodePort: 31002
    name: grpc
---
apiVersion: v1
kind: Service
metadata:
  name: orderer
  namespace: ordererorg1
  labels:
    app: orderer
spec:
  selector:
    app: orderer
  ports:
  - protocol: TCP
    port: 7050
    targetPort: 7050
    name: grpc
---
apiVersion: v1
kind: Service
metadata:
  namespace: peerorg1
  name: peer1
  labels:
    app: org1peer1
spec:
  selector:
    app: org1peer1
  ports:
  - protocol: TCP
    port: 7051
    targetPort: 7051
    name: grpc
  - protocol: TCP
    port: 7053
    targetPort: 7053
    name: events
---
apiVersion: v1
kind: Service
metadata:
  namespace: peerorg1
  name: peer2
  labels:
    app: org1peer2
spec:
  selector:
    app: org1peer2
  ports:
  - protocol: TCP
    port: 8051
    targetPort: 7051
    name: grpc
  - protocol: TCP
    port: 8053
    targetPort: 7053
    name: events
---
apiVersion: v1
kind: Service
metadata:
  namespace: peerorg2
  name: peer1
  labels:
    app: org2peer1
spec:
  selector:
    app: org2peer1
  ports:
  - protocol: TCP
    port: 9051
    targetPort: 7051
    name: grpc
  - protocol: TCP
    port: 9053
    targetPort: 7053
    name: events
---
apiVersion: v1
kind: Service
metadata:
  namespace: peerorg2
  name: peer2
  labels:
    app: org2peer2
spec:
  selector:
    app: org2peer2
  ports:
  - protocol: TCP
    port: 10051
    targetPort: 7051
    name: grpc
  - protocol: TCP
    port: 10053
    targetPort: 7053
    name: events
